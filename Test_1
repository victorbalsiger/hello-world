"""_______________________________________________________________________________A. match_ends Given a list of strings, return the count of the number of strings where the string length is 2 or more and the first and last chars of the string are the same.Note: python does not have a ++ operator, but += works._______________________________________________________________________________anzW = len(list) #Anzahl WörteranzZ = len(list[2]) #Anzahl Zeichen in einem bestimmten EintragzeiS = list[1:] #Zeichen Beginn"""words = ['Book', 'Test', 'Software', 'BB','Tt']def match_ends(words):    count = 0    for word in words:        if len(word) >= 2 and word[0] == word[-1]:            count += 1    return countmatch_ends(words)"""_______________________________________________________________________________B. front_xGiven a list of strings, return a list with the strings in sorted order, except group all the strings that begin with 'x' first.e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']Hint: this can be done by making 2 lists and sorting each of them before combining them._______________________________________________________________________________"""words = ['XXX', 'TBXX', 'TTT', 'CCCC','LLLLLL']def front_x(words):    x_list = []    other_list = []    for word in words:        if word.startswith('x'):            x_list.append(word)        else:            other_list.append(word)    return sorted(x_list) + sorted(other_list)    front_x(words)                """_______________________________________________________________________________C. sort_lastGiven a list of non-empty tuples, return a list sorted in increasing order by the last element in each tuple.e.g. [(1, 7), (1, 3), (3, 4, 5), (2, 2)] yields [(2, 2), (1, 3), (3, 4, 5), (1, 7)]Hint: use a custom key= function to extract the last element form each tuple._______________________________________________________________________________"""tuples = [(1, 7), (1, 3), (3, 4, 5), (2, 2)]def sort_last(tuples):    return sorted(tuples, key=lambda numbers: numbers[-1])    sort_last(tuples)    f = lambda numbers: numbers[-1]  # Equivalent to def f(numbers): return numbers[-1]f((3, 4, 5))def test(got, expected):    prefix = 'OK' if got == expected else ' X'    # !r prints a Python representation of the strings (complete with quotes)    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)def main():    print 'match_ends'    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)    print    print 'front_x'    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),        ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),        ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),        ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])        print    print 'sort_last'    test(sort_last([(1, 7), (1, 3), (3, 4, 5), (2, 2)]),         [(2, 2), (1, 3), (3, 4, 5), (1, 7)])"""_______________________________________________________________________________D. remove_adjacentGiven a list of numbers, return a list where all adjacent == elements have been reduced to a single element, so [1, 2, 2, 3] returns [1, 2, 3]. You may create a new list or modify the passed in list._______________________________________________________________________________"""nums = [1, 2, 2, 3, 4,6,6]def remove_adjacent(nums):    result = []    for num in nums:        if len(result) == 0 or num != result[-1]:            result.append(num)    return resultremove_adjacent(nums)                """_______________________________________________________________________________E. linear_mergeGiven two lists sorted in increasing order, create and return a merged list of all the elements in sorted order. You may modify the passed in lists. Ideally, the solution should work in "linear" time, making a single pass of both lists.__________________________________________________________________________"""list1 = [5,6,70,200]list2 = [45,67,78,100,102,300]def linear_merge(list1, list2):    result = []    # Look at the two lists so long as both are non-empty.    # Take whichever element [0] is smaller.    while list1 and list2:  # Keep looping while both list are non-empty; equivalent to len(list1) != 0 and ...        if list1[0] < list2[0]:            result.append(list1.pop(0))        else:            result.append(list2.pop(0))    # Now tack on what's left    result.extend(list1)    result.extend(list2)    return resultlinear_merge(list1, list2)        def main():    print 'remove_adjacent'    test(remove_adjacent([1, 2, 2, 3]), [1, 2, 3])    test(remove_adjacent([2, 2, 3, 3, 3]), [2, 3])    test(remove_adjacent([]), [])    print    print 'linear_merge'    test(linear_merge(['aa', 'xx', 'zz'], ['bb', 'cc']),        ['aa', 'bb', 'cc', 'xx', 'zz'])    test(linear_merge(['aa', 'xx'], ['bb', 'cc', 'zz']),        ['aa', 'bb', 'cc', 'xx', 'zz'])    test(linear_merge(['aa', 'aa'], ['aa', 'bb', 'bb']),        ['aa', 'aa', 'aa', 'bb', 'bb'])            """_______________________________________________________________________________A. donutsGiven an int count of a number of donuts, return a string of the form 'Number of donuts: ', where  is the number passed in. However, if the count is 10 or more, then use the word 'many' instead of the actual count.So donuts(5) returns 'Number of donuts: 5' and donuts(23) returns 'Number of donuts: many'_____________________________________________________________________________def Hello(name):    name = name + '!!!!'    print 'Hello' , namename = 'Peter'Hello(name)"""count = 5def donuts(count):    if count < 10:        return 'Number of donuts: {}'.format(count)    else:        return 'Number of donuts: many'donuts(count)"""_______________________________________________________________________________B. both_endsGiven a string s, return a string made of the first 2 and the last 2 chars of the original string, so 'spring' yields 'spng'. However, if the string length is less than 2, return instead the empty string._______________________________________________________________________________"""s = 'Handout'def both_ends(s):    if len(s) < 2:        return ''    return s[:2] + s[-2:]  # First two characters + last two characters     both_ends(s)"""_______________________________________________________________________________C. fix_startGiven a string s, return a string where all occurences of its first char have been changed to '*', except do not change the first char itself.e.g. 'babble' yields 'ba**le'Assume that the string is length 1 or more. Hint: s.replace(stra, strb) returns a version of string s where all instances of stra have been replaced by strb.______________________________________________________________________________"""s = 'Telefon'def fix_start(s):    first_letter = s[0]    return first_letter + s[1:].replace(first_letter, "*")    fix_start(s)"""_______________________________________________________________________________D. MixUpGiven strings a and b, return a single string with a and b separated by a space '<a> <b>', except swap the first 2 chars of each string.e.g.'mix', pod' -> 'pox mid''dog', 'dinner' -> 'dig donner'Assume a and b are length 2 or more._________________________________________________________________________"""a = 'Telefon'b = 'Tennis'def mix_up(a, b):    a_swapped = b[:2] + a[2:]    b_swapped = a[:2] + b[2:]    return "{} {}".format(a_swapped, b_swapped) mix_up(a, b)        """_______________________________________________________________________________D. verbingGiven a string, if its length is at least 3, add 'ing' to its end. Unless it already ends in 'ing', in which case add 'ly' instead. If the string length is less than 3, leave it unchanged. Return the resulting string._______________________________________________________________________________"""s = 'Powerpack'def verbing(s):    if len(s) >= 3:        if s[-3:] != 'ing':            s += 'ing'  # Adds "ing" at the end of s        else:            s += 'ly'    return s    verbing(s)"""_______________________________________________________________________________E. not_badGiven a string, find the first appearance of the substring 'not' and 'bad'. If the 'bad' follows the 'not', replace the whole 'not'...'bad' substring with 'good'.Return the resulting string.So 'This dinner is not that bad!' yields: This dinner is good!_______________________________________________________________________________"""s = 'general notification'def not_bad(s):    not_loc = s.find('not')    bad_loc = s.find('bad')    if not_loc != -1 and bad_loc != -1 and bad_loc > not_loc:        s = s[:not_loc] + 'good' + s[bad_loc+3:]    return s    not_bad(s)      """_______________________________________________________________________________F. front_backConsider dividing a string into two halves. If the length is even, the front and back halves are the same length. If the length is odd, we'll say that the extra char goes in the front half.e.g. 'abcde', the front half is 'abc', the back half 'de'.Given 2 strings, a and b, return a string of the form a-front + b-front + a-back + b-back_____________________________________________________________________________"""a = 'general'B = 'notification'def front_back(a, b):    a_middle = (len(a)+1) / 2  # In Python 2, this gives an integer result    b_middle = (len(b)+1) / 2    return '{}{}{}{}'.format(a[:a_middle], b[:b_middle], a[a_middle:], b[b_middle:])       front_back(a,b)    def main():    print 'verbing'    test(verbing('hail'), 'hailing')    test(verbing('swiming'), 'swimingly')    test(verbing('do'), 'do')        print    print 'not_bad'    test(not_bad('This movie is not so bad'), 'This movie is good')    test(not_bad('This dinner is not that bad!'), 'This dinner is good!')    test(not_bad('This tea is not hot'), 'This tea is not hot')    test(not_bad("It's bad yet not"), "It's bad yet not")    print    print 'front_back'    test(front_back('abcd', 'xy'), 'abxcdy')    test(front_back('abcde', 'xyz'), 'abcxydez')    test(front_back('Kitten', 'Donut'), 'KitDontenut')    
